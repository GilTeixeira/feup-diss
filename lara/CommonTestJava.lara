//import weaver.jp.ClavaJoinPoints;
//import weaver.jp.FileJp;
//import weaver.Query;


import weaver.Ast;
import weaver.Query;
import weaver.jp.CommonJoinPoints;
//import weaver.jp.JoinPointsCommonPath;

import Property;

aspectdef Test
	printAst();

	var field = Query.search("field").first();
	var fieldarr = Query.search("field","arr").first();
	var map = Query.search("field","map").first();
	var obj = Query.search("field","obj").first();

	
	println(field.type.astNode);
	println(field.type.isClass);
	println(field.type.isPrimitive);
	println();
	
	println(fieldarr.type.astNode);
	println(fieldarr.type.isClass);
	println(fieldarr.type.isPrimitive);
	println();
	
	println(map.type.astNode);
	println(map.type.isClass);
	println(map.type.isPrimitive);
	println();
	
	println(obj.type.astNode);
	println(obj.type.isClass);
	println(obj.type.isPrimitive);
	println();
	
	println(fieldarr.type.astNode);
	println(fieldarr.type.isClass);
	println(fieldarr.type.isPrimitive);
	//println(map.type.astNode.getClass());
	

	
	/*
	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.astNode);
	println(fieldRef.astNode.getClass().getSimpleName());
	println(fieldRef.field.class.name);
	println(fieldRef.class);

	*/

	
	/*
	var met = Query.search("field").first();
	println(met.astNode.getType().getComponentType());

	var mapField = Query.search("field", "map").first();
	println(mapField.astNode.getType());
	println(mapField.type.children[0].astNode);
	println(mapField.type.children[1].astNode);
	println(mapField.type.usedTypes);
	*/

/*
	println();
	var param = Query.search("param").first();
	printObject(param.function);

	println();
	var varDecl = Query.search("varDecl").first();
	printObject(varDecl.name);
	printObject(varDecl.type);

	println();
	var varRef = Query.search("varRef").first();
	printObject(varRef.name);
	printObject(varRef.decl.name);


	println();
	printAst();

	*/

	/*
	var field = Query.search("field").first();
	println(field.name);
	println(field.class.name);

	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.field.name);
	println(fieldRef.class.name);
	*/
	
	//classes = Query.search("class",'Calculation').get();
	//println(classes[0].name);
/*
	var root = Ast.root();
	println("root:");
	printObject(root);
	childRoot = Ast.getChildren(root);
	println("childRoot:");
	printObject(childRoot);


	var jp = new JoinPointJps("astNode");
	var cl = new CallJps("astNode2");
	println(jp.code);
	println(cl.code);
	//println(test.bar());


	classes = Query.search("class").get();
	for(cl of classes)
		for(scl of cl.superClasses)
		println(scl.name);
		
	println(classes.length);
	println(classes[1].name);
	println(classes[1].superClasses[0].name);


	printAst();	




	

	println("Root:");
	printObject(Ast.root());
	println("---");
	
	print("root:");
	var root = Weaver.getWeaverEngine().getRootNode();
	print(Ast.getDescendants(root));
	print(":");
	*/

	/*   
	println("Root:");
	printObject(Ast.root());
	println("---");
	var root = (new JoinPoints()).root();
	println("---");

	*/ 
	//println(root);

	//printAst();

	//println(Weaver.AST_METHODS.toJavaJoinPoint(Query.root().astNode).ast);
	//println(Query.root().ast);



	
	//println(Ast.root());
	//println("call:");

	//printAst();

	//println(Query.search("file").get().length);
	//println(Query.search("class").get().length);
	//printAst();
		
	//var classes = Query.search("class",'Triple').get();
	//println(classes[0].name);
	//printObject(classes[2].superClasses[0].name);

	//println(classes[2].astNode.getMethods());
	//println(classes[2].astNode.getMethods().map(met =>met.record));
	///println(classes[2].astNode.getMethods().map(met =>met.record));
	//var tags = classes[2].superClasses.map(sc => sc.tagKind);
/*
	println(Query.search("function").first().instanceOf("file"));

	var call1 = Query.search("file").first();
	
	printObject(call1);
	
	
	var calls = Query.search("call").get();
	

	//printObject(calls);
	println(calls.length);
	//println(Query.search("call").get());

	//Query.search("call").get()
	println("---------FROM HERE------------");
	var pjp = new FunctionJp({});
	println("type:");
	println(pjp instanceof CallJp);
	/*
	
	*/

	/*
	var b = new B("fd2");
	println(b.name3);
	var a = new A("fd");
	
	println(a.name3);
	println(b.name3);
	println(a.name3);
	*/


end

/**
 *
 * @return {$jp[]} the descendants of the given node
 */

 /*
JoinPoints.prototype._all_descendants = function($jp) {
	var newJp = {};
	newJp.instanceOf = function(joinPointType) {
	    return true;
	};
	
	newJp.toString = function() {
	    return "Hello";
	};
	
	return [newJp];
}*/





function A(name2) {
	this.name2 = name2;
	this.name3 = 232;


}

function B(name2) {	
	A.call(this, name2);
	this.name3 = 111;

}

B.prototype = Object.create(A.prototype);

function printAst() {
	var root = (new JoinPoints()).root();
	printAstAux(root, "");

}

function printAstAux(root, tab) {

	var children = (new JoinPoints())._all_children(root);
	//println(tab+root.astNode);
	println(tab+root.joinPointType);
	println(tab+root.astNode.getClass().getSimpleName());
	/*
	if(root.astNode.getClass().getSimpleName() === 'CtTypeReferenceImpl'){
		var astNode = root.astNode;
		println(tab+astNode.getDeclaration());
	}
	*/
		
	//println(tab+root.astNode.getValue("tagKind"));
	for (child of children)
		printAstAux(child,'	'+tab);

}






