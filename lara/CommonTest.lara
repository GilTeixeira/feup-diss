//import weaver.jp.ClavaJoinPoints;
import weaver.jp.FieldRefJp;
//import weaver.Query;

import weaver.Ast;

import weaver.jp.CommonJoinPoints;
import weaver.jp.JoinPointsCommonPath;
import weaver.Ast;
import weaver.Query;
import Property;

aspectdef Test   
	printAst();

	//var cl = Query.search("class", "Foo3").first();
	//printObject(cl.methods);
	//println();
	//printObject(cl.constructors);
	
	var ccall = Query.search("constructorCall").first();
	println(ccall.astNode.getValue("constructorDecl"));
	//println(Weaver.AST_METHODS.toJavaJoinPoint(ccall.astNode));
	//println(ccall.astNode.getValue("constructionKind"));
	//println(ccall.astNode.getValue("valueKind"));
	//println(ccall.astNode.getValue("type"));
	//println(ccall.astNode.getValue("objectKind"));
	//println(ccall.astNode.getValue("context"));

	
	//printObject(cl.astNode.getConstructors().size());
	/**/
	
	/*
	var cl = Query.search("class", "Foo3").first();
	
	println("Number of Fields:");
	println(Query.searchFrom(cl).search("field").get().length);
	println(Query.searchFromInclusive(cl).search("field").get().length);

	println("Number of Classes:");
	println(Query.searchFrom(cl).search("class").get().length);
	println(Query.searchFromInclusive(cl).search("class").get().length);

	println(Query.searchFrom(cl,"fieldRef").get().length);
	*/

	/*
	var met = Query.search("method", "bar3").first();
	println(met.astNode.getDefinition().isPresent());
	println(met.astNode.getDefinition().get());
	
	var das  = new FunctionJp(met.astNode);
	println(das.name);

	
	var func = Query.search("function").first();
	println(func.parent);
*/


	/*
	//Problem with tree
	var cl = Query.search("class", "Foo3").first();


	var $fieldRefs = Query.searchFrom(cl).search("fieldRef").get();
	println($fieldRefs.length);

	for(met of cl.methods){
		var $fieldRefsMet = Query.searchFrom(met).search("fieldRef").get();
		println($fieldRefsMet.length);
		for($fieldRef of $fieldRefsMet){
			println("line: "+ $fieldRef.line);

		}

	}
	*/
/*
	println(cl.children[0].parent.name);
	//printObject(cl.parent);
	*/
	/*
	var param = Query.search("param").first();
	println(param.function.name);

	var varRef = Query.search("varRef").first();
	println(varRef.decl.function.class.name);
	*/
	
	//printObject($fieldRefs);

	//for()

	
	//var fieldRefs = Query.search("class").get();
	/*
	var fieldRef = fieldRefs[0];
	println(fieldRef.name);
	//printObject(fieldRef.astNode);
	println(fieldRef.astNode.getClass().getSimpleName());
	println(fieldRef.astNode.getValue("memberDecl"));
	
	println(Weaver.AST_METHODS.toJavaJoinPoint(fieldRef.astNode).joinPointType);
	println(Weaver.AST_METHODS.toJavaJoinPoint(fieldRef.astNode).decl);
	*/








	//println(mc.class.name);
	//println(mc.method.name);
/*
 	var root = Ast.root();
	println("root:");
	printObject(root);
	childRoot = Ast.getChildren(root);
	println("childRoot:");
	printObject(childRoot);
	
	classSingle = Query.search("class", "Single").first();
	println("Class Name: " + classSingle.name);
	println("Sups: " + classSingle.superClasses);
	println("Equal: " + (classSingle.name === 'Single'));
	println("Equal: " + (classSingle.name == 'Single'));
	println(typeof classSingle.name);
	println(typeof 'Single');
	println(typeof classSingle.superClasses);

	for (sup of classSingle.superClasses)
		println(typeof sup);
		


	println("Root:");
	println(Ast.root());
	println("---");
	var root = (new JoinPoints()).root();
	println("---");
	//println(root);

	printAst();

	*/
	
	//println(Ast.root());
	//println("call:");

	//printAst();

	//println(Query.search("file").get().length);
	//println(Query.search("class").get().length);
	/*
	printAst();
		
	var classes = Query.search("class",'Triple').get();
	println(classes[0].name);
	*/
	//printObject(classes[2].superClasses[0].name);

	//println(classes[2].astNode.getMethods());
	//println(classes[2].astNode.getMethods().map(met =>met.record));
	///println(classes[2].astNode.getMethods().map(met =>met.record));
	//var tags = classes[2].superClasses.map(sc => sc.tagKind);
/*
	println(Query.search("function").first().instanceOf("file"));

	var call1 = Query.search("file").first();
	
	printObject(call1);
	
	
	var calls = Query.search("call").get();
	

	//printObject(calls);
	println(calls.length);
	//println(Query.search("call").get());

	//Query.search("call").get()
	println("---------FROM HERE------------");
	var pjp = new FunctionJp({});
	println("type:");
	println(pjp instanceof CallJp);
	/*
	
	*/

	/*
	var b = new B("fd2");
	println(b.name3);
	var a = new A("fd");
	
	println(a.name3);
	println(b.name3);
	println(a.name3);
	*/


end

/**
 *
 * @return {$jp[]} the descendants of the given node
 */

 /*
JoinPoints.prototype._all_descendants = function($jp) {
	var newJp = {};
	newJp.instanceOf = function(joinPointType) {
	    return true;
	};
	
	newJp.toString = function() {
	    return "Hello";
	};
	
	return [newJp];
}*/





function A(name2) {
	this.name2 = name2;
	this.name3 = 232;


}

function B(name2) {	
	A.call(this, name2);
	this.name3 = 111;

}

B.prototype = Object.create(A.prototype);

function printAst() {
	var root = (new JoinPoints()).root();
	printAstAux(root, "");

}

function printAstAux(root, tab) {

	var children = (new JoinPoints())._all_children(root);
	//println(tab+root.astNode);
	//println(tab+root.joinPointType);
	println(tab+root.astNode.getClass().getSimpleName());
	//try {println(tab+root.astNode.code);}
	//catch(err) {}
	/*
	if(root.astNode.getClass().getSimpleName() === 'CXXRecordDecl'){
		var astNode = root.astNode;
		println(tab+astNode.tagKind);
		
	}
	*/
	if(root.instanceOf('fieldRef')){
		var astNode = root.astNode;
		println(tab+"isfieldRef");
		//println(tab+Weaver.AST_METHODS.toJavaJoinPoint(astNode).decl);
		//println(tab+astNode.getValue("memberDecl"));
		
	}
		
	//println(tab+root.astNode.getValue("tagKind"));
	for (child of children)
		printAstAux(child,'	'+tab);

}



