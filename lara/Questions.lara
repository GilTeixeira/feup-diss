import weaver.Query;
import weaver.jp.CommonJoinPoints;
import InterfaceUtils;

/**
 *  LARA Questions
 */
aspectdef Questions

	//Q1

	/*
	var file = Query.search('file').first();
	
	println("File: " + file);
	println("Class : " + file.children[0]);
	println("File: " + file.children[0].parent + "   " + file.children[0].parent.astNode);
	*/
	
	var client = Query.search('method', "Client").first();

	/*
	for(init of client.astNode.getInitializers()){
		if(init.getValue("initKind").getString()==="BaseInitializer")
			println(init.getValue("initExpr").getSubExpr());

	}
*/
	var superNode = Query.searchFrom(client, "memberCall").first();

	println(superNode.astNode.prettyprint());
	println(client.astNode);

	printAstFrom(client);
	 
	
	

	//println(client.astNode.getInitializers()[0]);
	//println(client.astNode.getInitializers()[0].getValue("initKind").getString()==="BaseInitializer");
	//println(client.astNode.getInitializers()[0].getValue("initExpr").getSubExpr());
	//println(client.astNode.getInitializers()[1]);
	//println(client.astNode.getInitializers()[1].getValue("initExpr").getCode());










	///////////////////////////////////////

	//printAst();

	//var ifs = Query.search('else').first();
	//var ifs = Query.search('if').first();

	//println(ifs.children[1].astNode.getShortRepresentation());
	//println(ifs.children[2].astNode.getShortRepresentation());
	//println(ifs.children[1].astNode.getShortRepresentation()===ifs.children[2].astNode.getShortRepresentation());

	//println(ifs.isElseIf);

	//println(ifs.code);


	
	//var $class1 = Query.search('class','Box').first();
	//var $class2 = Query.search('class','Shape').first();

	

	// Q1 : number of methods increases when pair1 is not commented

	/*
	var $class = Query.search('class','AccessTest').first();
	for (method of $class.allMethods)
		println("method: " + method.signature);

	println();
	println();
	*/



	// Q2: kadabra/Jackdaw keeps copying files outside folder





	/////////////////////////
	/////    Random   ///////
	/////    Tests    ///////
	/////////////////////////


		/*
	//Tests 
	// Test class.methods
	println("Test class.methods");
	var cl = Query.search("class", "Box").first();
	//var mets = cl.methods;
	println(cl.name);
	println(cl.methods);
	println(cl.methods[0].class.name == cl.name);
	println(cl.methods[0].signature);
	println(cl.methods[0].returnType.isClass);
	println();
	println(cl.methods[1].returnType.isClass);
	//
	// Test memberCall
	println("Test memberCall");
	var mc = Query.search("memberCall").first();	
	//println(CommonJoinPoints.toJoinPoint(mc.astNode.getExecutable().getDeclaringType()).joinPointType);
	//println("astnode: " + mc.astNode.getExecutable().getDeclaration());
	println(mc.method.name);
	println(mc.class.name);
	println(mc.function.name);
	// Test field
	var field = Query.search("field").first();
	println(field.name);
	println(field.class.name);
	// Test fieldRef
	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.field.name);
	println(fieldRef.class.name);
	

	
	//printObject(mc.astNode.getBase());
	//println(Weaver.AST_METHODS.toJavaJoinPoint(mc.astNode).decl);
	

	// test equals
	println("Test Equals");
	var field = Query.search("field").first();
	var field2 = Query.search("field").first();
	println(field === field2);
	println(field.joinPointType === field.joinPointType);
	println({} === {});

	// test allSuperClasses
	println(cl.name);
	println(cl.allSuperClasses.length);

	*/
	/*
	var fieldmyobject4 = Query.search("field", "myobject4").first();
	var fieldage = Query.search("field", "age").first();
	println(fieldmyobject4.name);
	println(fieldmyobject4.type.kind);
	println(fieldmyobject4.type.astNode.desugar().hasSugar());
	println(fieldmyobject4.type.astNode.desugarAll());
	var fieldmyobject4type = Weaver.AST_METHODS.toJavaJoinPoint(fieldmyobject4.astNode.type);
	println(fieldmyobject4type.templateArgsTypes);
	println();
	println(fieldmyobject4.type.usedClasses);
	println("usedTypes");
	println(fieldmyobject4.type.usedTypes);
	println(fieldmyobject4.type.usedTypes.filter(type=>type.isClass));
	println();
	//printObject(fieldmyobject4.type.astNode.getTypeDescendantsAndSelf()[0]);
	//println(fieldmyobject4.type.astNode.getDesugaredNodeFields[1].getCode());
	//MyPair2<AccessTestAux,int> myobject4;

	
	println();
	println(fieldage.name);
	println(fieldage.type.kind);
	println(fieldage.type.astNode.desugarAll().desugar().desugar());

	var cl = Query.search("class", "Animal").first();
	println(cl.name);
	println(cl.astNode.getType());
	
	*/
	/*
	println(Query.search("function").get().length);

	var dc = new FunctionJpx("");
	dc.test();
	*/
	/*
	var fieldmyobject4 = Query.search("field", "myobject4").first();
	var fieldage = Query.search("field", "atass").first();
	println(fieldmyobject4.type.astNode.getTypeDescendants()[0]);
	println();
	println(fieldage.type.astNode.getTypeDescendants()[0]);
	println(fieldage.type.astNode.getTypeDescendants()[1]);
	println(fieldage.type.astNode.getTypeDescendants()[2]);
	println();
	printObject(fieldage.type.usedTypes);
	println();
	println();
	println();
	printObject(fieldage.type.typeDescendantsAndSelf);
	println();
	println();
	println();
	printObject(fieldmyobject4.type.usedTypes);
	*/

	/*
	var cl = Query.search("class", "Tiger").first();
	printObject(cl.allSuperClasses);
	*/

	/*
	var cl = Query.search("class", "Foo3").first();
	//printObject(cl.allSuperClasses);

	var $fieldRefs = Query.searchFrom(cl).search("fieldRef").get();
	println($fieldRefs.length);
	printObject($fieldRefs);
	*/
	/*
	var cl = Query.search("class", "Dog").first();
	println((new CBO()).calculateForClass(cl));

	println(Query.searchFromInclusive(cl).search("field").get().length);
	*/
	//printObject(cl.allSuperClasses);

	//var cl = Query.search("class", "Box").first();
	//println(cl.astNode.getSuperclass().getTypeDeclaration());

	/*
	var a2 = Query.search("field","a2").first();
	var $fieldsTypes = a2.type.usedTypes;
	printObject($fieldsTypes);
	println();
	println();
	println($fieldsTypes[0].astNode.getClass().getSimpleName());
	println($fieldsTypes[0].astNode.isArray());
	println($fieldsTypes[1].astNode.getClass().getSimpleName());
	//$fieldsTypes = $fieldsTypes.filter($type => $type.isClass && $type.decl.id !== $class.id);
	//$fieldsTypes.forEach($type => classesCoupled.add($type.decl.id));
	*/
	/**/

	/*
	var a2 = Query.search("constructorCall").get()[1];
	//var $fieldsTypes = a2.type.usedTypes;
	//println(a2.type.isClass);
	//println(a2.astNode.getValue("constructorDecl"));
	//println(a2.astNode.line);
	printObject(a2.function);


	//printObject(cl.astNode.getConstructors()[0].getType());

	var a2 = Query.search("binary").get()[0];
	//var $fieldsTypes = a2.type.usedTypes;
	println(a2.astNode.getOp());
	println(a2.kind==="&&");

	var loop = Query.search("loop").get()[0];
	println(loop.hasCondition);
	//println(loop.condition.kind);

	var bar2 = Query.search("function","bar2").first();
	var bar2body = bar2.stmts;
	println(bar2body);

	var binary = Query.search("binary").get()[0];
	println(binary.kind === '&&');
	*/

	
	
end

