import weaver.Query;
import weaver.jp.CommonJoinPoints;

import InterfaceUtils;
import lara.System;
import Metrics.MetricsIndex;
import weaver.WeaverOptions;


/**
 * Aspect used to test the metrics.
 */
aspectdef Interface
	//printAst();
	
	printNumberOfClasses();

	//NUMBER_OF_CALCULATIONS = 5;
	calculateMetrics();
	/*
	var a = System.nanos();
	printNumberOfClasses();
	var b = System.nanos();
	println((b-a)/1000/1000);
	
	
	var timeBefore = performance.now();	
	printNumberOfClasses();
	var timeMid = performance.now();
	printNumberOfClasses();
	var timeAfter = performance.now();
	println("First: "+ (timeMid- timeBefore));
	println("Second: "+ (timeAfter- timeMid));
	*/

	//println(WeaverOptions.getData().get("workspace").toString());
	

	//var funcResults = calculateFunctionMetrics();
	//var classResults = calculateClassMetrics();
	//var fileResults = calculateFileMetrics();
	//calculateMetrics();
	//var projectResults = calculateProjectMetrics();

	
	//calculateMetricsRepeated(NUMBER_OF_CALCULATIONS);
	//testMetrics(metrics);
	//testFileMetrics(metrics);
	
	///NUMBER_OF_CALCULATIONS = 5;
	//testMetricsRepeated(metrics, NUMBER_OF_CALCULATIONS);

	/////////////////////////////
	//  Random Tests
	////////////////////////////

	//var expr = Query.search("binary").first();
	//printObject(expr.astNode.get("operator").getAsString()==="+");
	//println(expr.kind.toString() === "PLUS");
	
	//var calls = Query.search("call").first();
	//println(calls.name);
	//println(calls.function);
	/*
	var constructorCall = Query.search("constructorCall").first();
	println(constructorCall.name);
	println(constructorCall.function);

	var constructor = Query.search("constructor").first();
	println(constructor.name);
	//println(constructorCall.function);
	
	//println(calls.function);

	var func = Query.search("function").first();
	println(func.hasBody);
	println(func.stmts);
	//println(constructorCall.function);

	var ifs = Query.search("if").first();
	println(ifs.condition);
	println(ifs.code);
	println();

	var loop = Query.search("loop").first();
	println(loop.condition);
	//println(loop.astNode.get("test").isJsonNull());
	println(loop.code);

	var varDecl = Query.search("varDecl").first();
	println(varDecl.astNode);
	println(varDecl.astNode.get("id").get("name").getAsString());
	println(varDecl.name);
	//println(loop.astNode.get("test").isJsonNull());
	//println(loop.code);

	var varRef = Query.search("varRef").first();
	println(varRef.astNode);
	//println(varDecl.astNode.get("id").get("name").getAsString());
	println(varRef.endLine);

	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.name);
	//println(varDecl.astNode.get("id").get("name").getAsString());
	//println(varRef.endLine);
	*/
	/*
	fcase = search("case").first();
	//println(search("case").get().length);
	println(fcase.code);
	println(fcase.astNode.getLabel());
	println(fcase.astNode.getCaseExpressions());
	*/
	////////////////////
	
	//var store = Query.search("class","Store").first();

	//var mc = Query.searchFrom(store,"method","listProducts").first();
	/*
	for(m of mc){
		println(m.method.signature);
		println(m.code);
		println();

		}
		*/
	//println(Weaver.AST_METHODS.toJavaJoinPoint(mc.astNode).ast);
	//var loop = Query.searchFrom(store,"method","listProducts").search("loop").first();
	//printAstFrom(mc);
	//println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
	//println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
	//printAstFrom(loop.body);

	//printAst();
	/*
	var ifs = Query.search("if").get();

	println(ifs.length);
	println(ifs[0].astNode);
	println(ifs[1].astNode);

	printAstFrom(ifs[0].then);
	printAstFrom(ifs[1].then);
	*/

	//var box = Query.search("class", "Transaction").first();

	//println(box.allMethods.length);
	//println(box.allMethods[0].astNode.getDefinition().isPresent() === false);
	/*
	printAst();
	var Rectangle = Query.search("method","Rectangle").first();
	print(Rectangle.astNode.getInitializers()[0].getValue("initExpr").getValue("constructorDecl"));
	*/
	//printAst()
	
	/*;
	var Rectangle = Query.search("class","Shape").first();
	
	//println(Rectangle.ancestor("file"));
	//printAstFrom(Rectangle);
	//println(Rectangle.parent.parent.astNode.getClass().getSimpleName());

	var file = Query.search("file").first();

	println(file);
	println(file.children[0]);
	println(file.children[0].parent.astNode.getClass().getSimpleName());
	*/
	//Ast2Path();

	/*
	var $class = Query.search('class').first();
	var noc = 0;
	var $classes = Query.search('class').get();
	for($classSub of $classes){
		var superClasses = $classSub.superClasses;
		for($classSuper of superClasses){
			println($classSuper);
			println($classSuper.astNode.getClass());
			println($classSuper.id === $class.id);


		}
		//if($classSub.superClasses.some($classSuper => $classSuper.id === $class.id))
			noc++;
	}
	return noc;
	*/
	
	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//println((new CogniComplex()).calculateForFunction(setYear));

	//printAstFrom(setYear);

	//var $class = Query.search('class','Shape').search('fieldRef').get()[1];

	//println($class.field);
	//printAstFrom($class.parent.parent);

	//(new NOC()).calculateForProject();

	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//println((new CogniComplex()).calculateForFunction(setYear));

	//printAstFrom(setYear);


	//var Client = Query.search('class',"Client").first();
	//println((new CBO()).calculateForClass(Client));
	//printAstFrom(Client);

	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//printAstFrom(setYear);

	//var bin =  Query.searchFrom(setYear,'binary').get()[2];
	//println(bin.parent.astNode.getClass().getSimpleName()==="ParenExpr");

	//println(bin.code);
	//println(bin.isInnerExpr);
	//println(bin.isInnerExpr);
	//println(bin.parent.parent.isInnerExpr);

/*
	var Date =  Query.search('class',"Date").search("method","operator==").first();

	var bin2 =  Query.search('class',"Date").search("method","operator==").search("binary").get()[0];
	var bin2 =  Query.search('class',"Date").search("method","operator==").search("binary").get()[1];
	//printAstFrom(Date);
	println(bin2.code);
	println(bin2.instanceOf('binary'));
	println(bin2.isLogicOp);
	println(bin2.isInnerExpr);
	println(bin2.outerExpr);
	println(bin2.outerExpr.kind);
	*/

	/*
	var $classes = Query.search('class').get();
		for($class of $classes)
			println($class.name);
	*/

	/*
	var trans = Query.search('class','Transaction').search('method',"toString").first();
	var param = Query.searchFrom(trans,'memberCall').get()[0];
	println(param.class);
	println(param.class.ancestor("file")==null);
	println(param.class.isCustom);
	println(trans.class.isCustom);
	*/
	//printAstFrom(trans);

	//var client = Query.search('class','Client').first();
	//println(client.allMethods.length);
	//var methodsComplexity = [];

	//console.log(methodsComplexity.reduce((accumulator, currentValue) => accumulator + currentValue,0));

	//var client = Query.search('class','Client').first();
	
	//var client = Query.search('class','String').first();

	/*
	for (file of Query.search('file')){
		try {
		println(file.astNode.getFile().getPath().substring(76));
		}
		catch(err){
		}

		}
	*/

	/**/

	/**/
	/*	
	$file = Query.search('file').get()[0];

	println("Start here");
	println("Filename: " + $file.astNode);
	println("descendants: " + $file.descendants.length);
	println("children: " + $file.children.length);


	$cl = Query.search('class').get()[0];
	println("Filename: " + $cl.astNode);
	println("descendants: " + $cl.descendants.length);
	println("children: " + $cl.children.length);
	
	
	
	for(jp of $file.descendants){

		println(jp.joinPointType);
	
	}
	*/

	//var data = WeaverOptions.getData().get("workspace").toString();
	//println(data.length);

	//cl = Query.search('class',"ElasticsearchNode").get()[0];

	//println("Start here");
	//println("class: " + cl.name);
	//println((new LCOM94()).calculateForClass(cl))


	/*
	cl = Query.search('class',"UnreleasedVersionInfo").get()[0];
	
	//println(cl.id);
	//println(cl.parent.id);

	var p = 'org.elasticsearch.gradle.BwcVersions$UnreleasedVersionInfo$dfggfd$gfdgfd';

	var regex = /$/g;	

	//p = p.replace(regex, '.');
	println(p.split('$').join('.'));

	println(cl.id);
	println(cl.parent.id);


	cl = Query.search('class',"String").get()[0];
	println(cl.id);
	*/

	//cl = Query.search('file').get()[0];
	//println(cl.astNode);
	//println(cl.astNode.getRelativeFilepath()=== "Client.h");

	//cl = Query.search('class').get()[0];
	//println(cl.astNode);

	//var root = (new JoinPoints()).root();
	//println(root.astNode);

	//cl = Query.search('file').get()[0];
	//println(cl.name);
/*
	cls = Query.search('class','implementation').get();
	for( cl of cls){
	println("Name: " + cl.name);
	println();
	println();
	println("Node: " + cl.astNode);
	println();
	println();
	println("Bases: " + cl.astNode.getValue("recordBases"));
	println();
	println();
	println("superClasses: " + cl.superClasses);
	println();
	println();
	println();
	println();
	println("---------------------------------------------------");
	}
	*/
	/*
	cl = Query.search('class','implementation').get()[1];
	
	println("Name: " + cl.name);
	println();
	println();
	println("Node: " + cl.astNode);
	println();
	println();
	println("Bases: " + cl.astNode.getValue("recordBases"));
	println();
	println();
	println("Type: " + cl.astNode.getValue("recordBases")[0].getValue("type"));
	println();
	println("superClasses: " + cl.superClasses);
	
	println();
	println();
	println();
	println("---------------------------------------------------");
	*/

	/*
	cl = Query.search('class','field').get()[1];
	
	println("Name: " + cl.name);
	println();
	println();
	println("Node: " + cl.astNode);
	println();
	println();
	println("Bases: " + cl.astNode.getValue("recordBases"));
	println();
	println();
	println("getTagKind: " + cl.superClasses[0].astNode.getTagKind());
	println();
	println();
	println("superClasses: " + cl.superClasses);
	*/

	/*
	cl = Query.search('class',"implementation").get()[1];

	//println("Start here");
	//println("class: " + cl.name);
	//println((new RFC()).calculateForClass(cl));

	for (var $method of cl.allMethods){
		for($memberCall of Query.searchFrom($method,"memberCall")){
			println($memberCall);
			println($memberCall.astNode);
			println($memberCall.astNode.getFunctionDecl().get());
			println($memberCall.astNode.getFunctionDecl().get().getDefinition());


			println($memberCall.method);

		}

	}
	*/

	/**/

	/*
	cl = Query.search('class',"basic_string_view").get()[1];
	println("Class id");
	println(cl.id);
	println("Class Code");
	println(cl.astNode.getCode());
		*/


	/*
	cls = Query.search('class',"basic_string_view").get();
	cl = cls[1];

	println(cls.length);

	println("Class Name");
	println(cl.name);

	println(cl.astNode);

	println("Class Code");
	println(cl.astNode.getCode());
	println(cl.code);
	*/
	
	/*
	cl = Query.search('class').first();

	println(cl.astNode);
	println(cl.name);
	println(cl.astNode.getQualifiedName());
	*/

	/*
	for(cl of Query.search("class")){
		println(cl.id);
		println(cl.astNode);
		println(cl.allMethods);
		}
		*/
	/*
	for(cl of Query.search("function")){
		println(cl.id);
	}
	*/

	/*
	cl = Query.search('class',"implementation").get()[1];


	for (var $method of cl.allMethods){
		for($memberCall of Query.searchFrom($method,"memberCall")){
			println($memberCall);
			println($memberCall.astNode);
			println($memberCall.astNode.getFunctionDecl().get());
			println($memberCall.astNode.getFunctionDecl().get().getDefinition());


			println($memberCall.method);

		}

	}
	*/

	/*
	cl = Query.search('file', 'isCancel.js').first();
	printAstFrom(cl);

	bi = Query.search('file', 'isCancel.js').search('binary').first();

	
	println(bi);
	println(bi.kind);
	println(bi.isInnerExpr);
	println(bi.outerExpr);
	*/

	/*
	for(cl of Query.search("function")){
		if(cl.joinPointType !== "method" && cl.joinPointType !== "constructor" )
		println(cl.id);
	}

	cl = Query.search("class").get()[0];
	println(cl.astNode);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	//println(cl.astNode.hasDefinition());
	println();

	cl = Query.search("class").get()[1];
	println(cl.astNode);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	*/

	/*
	cl = Query.search('class',"basic_string_view").get()[1];
	println("Class id");
	println(cl.id);
	println("Class Code");
	println(cl.astNode.getCode());
	*/

	//var root = (new JoinPoints()).root();
	//println(root.astNode);


/*
	var bi = Query.search("if").get()[2];
	println(bi.astNode);
	println();
	println(bi.parent.astNode);
	println(bi.parent.parent.astNode);
	//println(bi.isLogicOp);
	//println(bi.isInnerExpr);
	*/

	/*
	var stmt = Query.search("else").first();
	println(stmt.astNode);
	println(stmt.parent.astNode);
	//println(!stmt.isAnonymous);
	*/
	
	/*
	var stmt = Query.search("file","deprecatedMethod.js").get()[0];
	println(stmt.name);
	println(stmt.code);
	println(stmt.astNode.get("loc"));
	println(stmt.loc);
	println(stmt.code.split(/\r\n|\r|\n/));
	*/
	/*
	var stmt = Query.search("function","check_utf8_bytes").get()[0];
	println(stmt.astNode.getCode());
	*/
	/*
	var count = 0;
	for(func of Query.search('function'))
		try {
		println((new LOC()).calculateForFunction(func));
		}
		catch(err){
		count++;
		
		 println("ERROR:");
		 println(err);
		 
		 println("NODE:");
		 println(func.signature);

		 println("LINE:");
		 println(func.line);

		 println("FILE:");
		 println(func.ancestor("file").path);


		 
		 println("NODE:");
		 println(func.astNode);
		
		 println();
		 
		}

	//println("Count:" + count);
	//println("Total:" + Query.search('function').get().length);
	

	
	//for(file of Query.search('file'))
		//println(file.path);

	println("Number of files: " + Query.search('class').get().length);
	println("Number of files: " + Query.search('file').get().length);

	fi = Query.search('file','RegexCache.java').first();

	//printAstFrom(fi);

	*/

	/*
	cl = Query.search("class","Person").get()[0];
	println(cl.astNode);
	println(cl.id);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	println(cl.astNode.getValue("hasDefinition"));
	println(cl.astNode.getValue("isCompleteDefinition"));
	//println(cl.astNode.hasDefinition());
	println();

	cl = Query.search("class","Person").get()[1];
	println(cl.astNode);
	println(cl.id);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	println(cl.astNode.getValue("hasDefinition"));
	println(cl.astNode.getValue("isCompleteDefinition"));
	//println(cl.astNode.hasDefinition());
	println();
	*/

	/*
	cl = Query.search("class","Date").get()[0];
	println(cl.astNode);
	println(cl.id);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	println(cl.astNode.getValue("hasDefinition"));
	println(cl.astNode.getValue("isCompleteDefinition"));

	cl = Query.search("class","Date").get()[1];
	println(cl.astNode);
	println(cl.id);
	println(cl.astNode.getValue("recordDefinition").isPresent());
	println(cl.astNode.getValue("hasDefinition"));
	println(cl.astNode.getValue("isCompleteDefinition"));
	*/

	
	//println(cl.astNode.hasDefinition());
	//println();
	/*
	var cl = Query.search("class","Date").first();
	var mets = cl.descendants.filter(jp=>jp.instanceOf("method"));
	println("Number Of methods (desc): " + mets.length);

	println("Number Of methods (query): " + Query.search("class","Date").search("method").get().length);

	*/
	/*
	for (cl of Query.search("class"))
		println(cl.astNode.getQualifiedName()+"-        -" + cl.id + "-        -" + cl.name);
	*/
	//println(Query.search("function").get().length);
	//println();
	//println(JSON.stringify(, null, 4));

	
	//println(Query.search("class").get().length);

	 //println(Query.search("class", "Date").get().length);

	 //for(cl of  Query.search("class", "Store").first())
	 	//printAstFrom(cl);
	 	//println(cl.children[0].children);

	  //cl = Query.search("class", "Store").first();

	  //println(cl.astNode.getMethods().length);
	  //println(cl.allMethods.length);
	  //println("wut");
	  //printAstFrom(cl);
	  //println((new RFC()).calculateForClass(cl));
	  //println((new CogniComplex()).calculateForProject());
/*
	  println(cl.astNode);

	  a("fd");
	  a("fd",true);

	  */

	  //println( Query.search("file").get().length);
end



