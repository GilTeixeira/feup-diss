import weaver.Query;

import InterfaceUtils;
import Metrics.Metrics;
//import MetricQuery.MetricQueryClava;
import MetricQuery.MetricQueryKadabra;

/**
 * Aspect used to test the metrics.
 */
aspectdef Interface
	
	printNumberOfClasses();

	var classMetrics = [];
	var functionMetrics = [];


	// Add metrics

	//classMetrics.push(new NOC());
	//classMetrics.push(new DIT());
	//classMetrics.push(new RFC());
	//classMetrics.push(new WMC());
	//classMetrics.push(new LCOM94());
	//classMetrics.push(new CBO());
	
/*
	testClassMetricCpp(new LCOM94());
	testClassMetricCpp(new WMC());
	testClassMetricCpp(new RFC());
	testClassMetricCpp(new CBO());
	testClassMetricCpp(new DIT());
	testClassMetricCpp(new NOC());
*/ 


	
	//testClassMetricJava(new NOC());
	//testClassMetricJava(new DIT());
	//testClassMetricJava(new RFC());
	//testClassMetricJava(new WMC());
	testClassMetricJava(new LCOM94());
	//testClassMetricJava(new CBO());
	

	



	
	//testClassMetricInd(new NOC());
	//testClassMetricInd(new DIT());
	//testClassMetricInd(new RFC());  // Different from Java because it does not count System, Math calls
	//testClassMetricInd(new WMC());
	testClassMetricInd(new LCOM94());
	//testClassMetricInd(new CBO());


	/////////////////////////////////

	//for (var $method of Query.search('class','My_Calculation').search("method",'main').get())
	//	methodsSignatures.add($class.name + '::' + $method.name); // TODO change to signature

	//methodsSignatures.add({'class': 'Puppy', 'method': 'main'});

	// Methods called by the methods of $class
	//var $methods = Query.search('class','My_Calculation').search("method").get();
	//var $calls = Query.search('class').search("method").search("call").get();

	//$calls.forEach($call => methodsSignatures.add($call.targetType.name+ '::' + $call.name ));

	/*
	println("Calls:");
	$methods.forEach($method => {
		MetricQuery.getMethodsCalled($method);
		
	});
	*/

end
