import weaver.Query;
import weaver.jp.CommonJoinPoints;

import InterfaceUtils;
import Metrics.MetricsIndex;


/**
 * Aspect used to test the metrics.
 */
aspectdef Interface
	//printAst();
	
	printNumberOfClasses();

	//testMetrics(metrics);
	NUMBER_OF_CALCULATIONS = 5;
	testMetricsRepeated(metrics, NUMBER_OF_CALCULATIONS);

	/////////////////////////////
	//  Random Tests
	////////////////////////////

	//var expr = Query.search("binary").first();
	//printObject(expr.astNode.get("operator").getAsString()==="+");
	//println(expr.kind.toString() === "PLUS");
	
	//var calls = Query.search("call").first();
	//println(calls.name);
	//println(calls.function);
	/*
	var constructorCall = Query.search("constructorCall").first();
	println(constructorCall.name);
	println(constructorCall.function);

	var constructor = Query.search("constructor").first();
	println(constructor.name);
	//println(constructorCall.function);
	
	//println(calls.function);

	var func = Query.search("function").first();
	println(func.hasBody);
	println(func.stmts);
	//println(constructorCall.function);

	var ifs = Query.search("if").first();
	println(ifs.condition);
	println(ifs.code);
	println();

	var loop = Query.search("loop").first();
	println(loop.condition);
	//println(loop.astNode.get("test").isJsonNull());
	println(loop.code);

	var varDecl = Query.search("varDecl").first();
	println(varDecl.astNode);
	println(varDecl.astNode.get("id").get("name").getAsString());
	println(varDecl.name);
	//println(loop.astNode.get("test").isJsonNull());
	//println(loop.code);

	var varRef = Query.search("varRef").first();
	println(varRef.astNode);
	//println(varDecl.astNode.get("id").get("name").getAsString());
	println(varRef.endLine);

	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.name);
	//println(varDecl.astNode.get("id").get("name").getAsString());
	//println(varRef.endLine);
	*/
	/*
	fcase = search("case").first();
	//println(search("case").get().length);
	println(fcase.code);
	println(fcase.astNode.getLabel());
	println(fcase.astNode.getCaseExpressions());
	*/
	////////////////////
	
	//var store = Query.search("class","Store").first();

	//var mc = Query.searchFrom(store,"method","listProducts").first();
	/*
	for(m of mc){
		println(m.method.signature);
		println(m.code);
		println();

		}
		*/
	//println(Weaver.AST_METHODS.toJavaJoinPoint(mc.astNode).ast);
	//var loop = Query.searchFrom(store,"method","listProducts").search("loop").first();
	//printAstFrom(mc);
	//println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
	//println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
	//printAstFrom(loop.body);

	//printAst();
	/*
	var ifs = Query.search("if").get();

	println(ifs.length);
	println(ifs[0].astNode);
	println(ifs[1].astNode);

	printAstFrom(ifs[0].then);
	printAstFrom(ifs[1].then);
	*/

	//var box = Query.search("class", "Transaction").first();

	//println(box.allMethods.length);
	//println(box.allMethods[0].astNode.getDefinition().isPresent() === false);
	/*
	printAst();
	var Rectangle = Query.search("method","Rectangle").first();
	print(Rectangle.astNode.getInitializers()[0].getValue("initExpr").getValue("constructorDecl"));
	*/
	//printAst()
	
	/*;
	var Rectangle = Query.search("class","Shape").first();
	
	//println(Rectangle.ancestor("file"));
	//printAstFrom(Rectangle);
	//println(Rectangle.parent.parent.astNode.getClass().getSimpleName());

	var file = Query.search("file").first();

	println(file);
	println(file.children[0]);
	println(file.children[0].parent.astNode.getClass().getSimpleName());
	*/
	//Ast2Path();

	/*
	var $class = Query.search('class').first();
	var noc = 0;
	var $classes = Query.search('class').get();
	for($classSub of $classes){
		var superClasses = $classSub.superClasses;
		for($classSuper of superClasses){
			println($classSuper);
			println($classSuper.astNode.getClass());
			println($classSuper.id === $class.id);


		}
		//if($classSub.superClasses.some($classSuper => $classSuper.id === $class.id))
			noc++;
	}
	return noc;
	*/
	
	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//println((new CogniComplex()).calculateForFunction(setYear));

	//printAstFrom(setYear);

	//var $class = Query.search('class','Shape').search('fieldRef').get()[1];

	//println($class.field);
	//printAstFrom($class.parent.parent);

	//(new NOC()).calculateForProject();

	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//println((new CogniComplex()).calculateForFunction(setYear));

	//printAstFrom(setYear);


	//var Client = Query.search('class',"Client").first();
	//println((new CBO()).calculateForClass(Client));
	//printAstFrom(Client);

	//var setYear = Query.search('class',"Store").search('method',"listTransationTimePeriod").first();
	//printAstFrom(setYear);

	//var bin =  Query.searchFrom(setYear,'binary').get()[2];
	//println(bin.parent.astNode.getClass().getSimpleName()==="ParenExpr");

	//println(bin.code);
	//println(bin.isInnerExpr);
	//println(bin.isInnerExpr);
	//println(bin.parent.parent.isInnerExpr);

/*
	var Date =  Query.search('class',"Date").search("method","operator==").first();

	var bin2 =  Query.search('class',"Date").search("method","operator==").search("binary").get()[0];
	var bin2 =  Query.search('class',"Date").search("method","operator==").search("binary").get()[1];
	//printAstFrom(Date);
	println(bin2.code);
	println(bin2.instanceOf('binary'));
	println(bin2.isLogicOp);
	println(bin2.isInnerExpr);
	println(bin2.outerExpr);
	println(bin2.outerExpr.kind);
	*/

	/*
	var $classes = Query.search('class').get();
		for($class of $classes)
			println($class.name);
	*/

	/*
	var trans = Query.search('class','Transaction').search('method',"toString").first();
	var param = Query.searchFrom(trans,'memberCall').get()[0];
	println(param.class);
	println(param.class.ancestor("file")==null);
	println(param.class.isCustom);
	println(trans.class.isCustom);
	*/
	//printAstFrom(trans);

	//var client = Query.search('class','Client').first();
	//println(client.allMethods.length);
	//var methodsComplexity = [];

	//console.log(methodsComplexity.reduce((accumulator, currentValue) => accumulator + currentValue,0));

	//var client = Query.search('class','Client').first();
	

end


