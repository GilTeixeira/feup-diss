import lara.Io;


function calculateMetricsRepeated(numberOfRepeats){
	var results = calculateMetrics();

	 for(var i = 1 ; i< numberOfRepeats ; i++){
	 	nextResults = calculateMetrics();
		for(var resultGranularity in results){
		 	for(var j = 0 ; j< results[resultGranularity].length ; j++){
		 	
	
		 	
		 		currAvg = results[resultGranularity][j].time;
		 		lastTime = nextResults[resultGranularity][j].time;
		 		results[resultGranularity][j].time = ((currAvg * i) + lastTime) / (i+1);
	
		 		//println("Metric:    " + results[j].metric);
				//println("Class:     " + results[j].class);
				//println("Curr Time: " + currAvg);			
				//println("Avg Time:  " + results[j].time);
				//println();
				//result.time = ((result.time * i) + nextResults[index].time) / (i+1);			
				//println("Avg Time:  " + result.time);
				
		 	}
	 	}
	
      
   }
	var header = "id;metric;value;time\n";
	
	writeResultsToFile(results["funcResults"], "function_results.csv", header);
	writeResultsToFile(results["classResults"], "class_results.csv", header);
	writeResultsToFile(results["fileResults"], "file_results.csv", header);
	writeResultsToFile(results["projectResults"], "project_results.csv", "metric;value;time\n");
}

function calculateMetrics(){
	var funcResults = calculateFunctionMetrics();
	var classResults = calculateClassMetrics();
	var fileResults = calculateFileMetrics();
	var projectResults = calculateProjectMetrics();

	var header = "id;metric;value;time\n";

	writeResultsToFile(funcResults, "function_results.csv", header);
	writeResultsToFile(classResults, "class_results.csv", header);
	writeResultsToFile(fileResults, "file_results.csv", header);
	writeResultsToFile(projectResults, "project_results.csv", "metric;value;time\n");

	return {"funcResults":funcResults,"classResults":classResults,
		"fileResults":fileResults,"projectResults":projectResults};

}


function calculateFunctionMetric($function){

	//println('Function: '+ $function.signature + '\n');

	var totalTime = 0;
	results = [];

	for(metric of metrics) {
		if (typeof metric.calculateForFunction == 'function'){
			var timeBefore = System.nanos();	
    			var value = metric.calculateForFunction($function);
    			var timeAfter = System.nanos();

    			var time = (timeAfter - timeBefore);
			totalTime += time;
			
			//println('	' + metric.sigla + ' = ' + value);
			//println('	Time: ' + time/1000/1000 + ' ms.');
			//println();


			var result = {"id":$function.id,"metric":metric.id,"value":value,"time":time};		
			results.push(result);
		}
	}
	
	//println('	Time to calculate all metrics: ' + totalTime/1000/1000 + ' ms.');
	//println();
	//println();
	
	return results;

}



function calculateFunctionMetrics() {
	println("/////////////////////////////////");
	println("/// Testing Function Metrics ////");
	println("/////////////////////////////////");
	println();	

	var results=[];

	for(var $function of Query.search("function"))
		results = results.concat(calculateFunctionMetric($function));	

	return results;
}

function calculateClassMetric($class){

	println('Class: '+ $class.id + '\n');

	var totalTime = 0;
	var results = [];

	for(metric of metrics) {
		if (typeof metric.calculateForClass == 'function'){
			var timeBefore = System.nanos();	
    			var value = metric.calculateForClass($class);
    			var timeAfter = System.nanos();

    			var time = (timeAfter - timeBefore);
			totalTime += time;
			
			println('	' + metric.sigla + ' = ' + value);
			println('	Time: ' + time/1000/1000 + ' ms.');
			println();


			var result = {"id":$class.id,"metric":metric.id,"value":value,"time":time};		
			results.push(result);
		}			
		
	}
	
	println('	Time to calculate all metrics: ' + totalTime/1000/1000 + ' ms.');
	
	return results;

}

// Special Case when Calculation for whole project is faster than calculate for each class
function calculateProjectMetricPerFunction(){	
	var results=[];

	for(metric of metrics) {
		
		if (typeof metric.calculateForProjectPerClass == 'function'){
			var timeBefore = System.nanos();	
    			var values = metric.calculateForProjectPerClass();
    			var timeAfter = System.nanos();
    			
    			var time = (timeAfter - timeBefore);
			
			values.forEach(function(value, classId) {
				time = (time/values.size);
				//println('	' + metric.sigla + ' = ' + value);
				//println('	Time: ' + time + ' ms.');
				//println();
						
				var result = {"id":classId,"metric":metric.id,"result":value,"time":time};				
				results.push(result);
			});		
    		}    		
	}
	
	return results;
	
}



function calculateClassMetrics() {
	println("/////////////////////////////////");
	println("///  Testing Class Metrics   ////");
	println("/////////////////////////////////");
	println();	

	var results=[];

	for(var $class of Query.search("class"))
		results = results.concat(calculateClassMetric($class));	

	results = results.concat(calculateProjectMetricPerFunction());

	return results;
}


function calculateFileMetric($file){

	println('File: '+ $file.path + '\n');

	var totalTime = 0;
	results = [];

	for(metric of metrics) {
		if (typeof metric.calculateForFile == 'function'){
			var timeBefore = System.nanos();	
    			var value = metric.calculateForFile($file);
    			var timeAfter = System.nanos();

    			var time = (timeAfter - timeBefore);
			totalTime += time;
			
			println('	' + metric.sigla + ' = ' + value);
			println('	Time: ' + time/1000/1000 + ' ms.');
			println();


			var result = {"id":$file.path,"metric":metric.id,"value":value,"time":time};		
			results.push(result);
		}
	}
	
	println('	Time to calculate all metrics: ' + totalTime/1000/1000 + ' ms.');
	println();
	println();
	
	return results;

}



function calculateFileMetrics() {
	println("/////////////////////////////////");
	println("///  Testing File Metrics   ////");
	println("/////////////////////////////////");
	println();	

	var results=[];

	for(var $file of Query.search("file"))
		results = results.concat(calculateFileMetric($file));	

	return results;
}





function calculateProjectMetrics() {
	println("/////////////////////////////////");
	println("/// Testing Project Metrics  ////");
	println("/////////////////////////////////");
	println();	

	var totalTime = 0;
	results = [];

	for(metric of metrics) {
		if (typeof metric.calculateForProject == 'function'){
			var timeBefore = System.nanos();	
    			var value = metric.calculateForProject();
    			var timeAfter = System.nanos();

    			var time = (timeAfter - timeBefore);
			totalTime += time;
			
			println('	' + metric.sigla + ' = ' + value);
			println('	Time: ' + time/1000/1000 + ' ms.');
			println();


			var result = {"metric":metric.id,"value":value,"time":time};		
			results.push(result);
		}
	}
	
	println('	Time to calculate all metrics: ' + totalTime/1000/1000 + ' ms.');
	println();
	println();
	
	return results;
}

function writeResultsToFile(results, file_path, header){

	
	var file = Io.writeFile(file_path,header);
	println("Results File Location: " + file.getAbsolutePath());
	
	for(result of results) {
		var line = Object.values(result).join(";")+"\n";
		//print(line);
		
		Io.appendFile(file_path,line);
	
	}

}


/*
function testMetricsRepeated(metrics, numberOfRepeats){
	 var results = testMetrics(metrics);

	 for(var i = 1 ; i< numberOfRepeats ; i++){
	 	nextResults = testMetrics(metrics);

	 	for(var j = 0 ; j< results.length ; j++){
	 	

	 	
	 		currAvg = results[j].time;
	 		lastTime = nextResults[j].time;
	 		results[j].time = ((currAvg * i) + lastTime) / (i+1);

	 		//println("Metric:    " + results[j].metric);
			//println("Class:     " + results[j].class);
			//println("Curr Time: " + currAvg);			
			//println("Avg Time:  " + results[j].time);
			//println();
			//result.time = ((result.time * i) + nextResults[index].time) / (i+1);			
			//println("Avg Time:  " + result.time);
			
	 	}
	
      
   }

	writeResultsToFile(results,"full_results.txt");
}


function testMetrics(metrics){

	var results = [];

	
	println("//////////////////////////////");
	println("/// Testing Project Metrics ////");
	println("//////////////////////////////");
	println();	

	for(metric of metrics) {
		if (typeof metric.calculateForProject == 'function')
    		results = results.concat(testProjectMetric(metric));
	}

	println("//////////////////////////////");
	println("/// Testing Class Metrics ////");
	println("//////////////////////////////");
	println();

	for(metric of metrics) {
		if (typeof metric.calculateForClass == 'function')
    		results = results.concat(testClassMetric(metric));
	}

	// Special Case when Calculation for whole project is easeier
	for(metric of metrics) {
		if (typeof metric.calculateForProjectPerClass == 'function')
    		results = results.concat(testClassMetric(metric));
	}

	

	
	println("/////////////////////////////////");
	println("/// Testing Function Metrics ////");
	println("/////////////////////////////////");
	println();

	
	for(metric of metrics) {
		if (typeof metric.calculateForFunction == 'function')
    		testFunctionMetric(metric);
	}
	

	
	writeResultsToFile(results,"full_results.txt");

}



function testFileMetrics(metrics){
	println("/////////////////////////////////");
	println("/// Testing File Metrics ////");
	println("/////////////////////////////////");
	println();

	var results=[];
	for(metric of metrics) {
		if (typeof metric.calculateForFile == 'function')
    		results = results.concat(testFileMetric(metric));

	}
	
	writeResultsToFile(results,"file_results.txt");
	
	return results;



}

function testClassMetrics(metrics){

	for(metric of metrics) {
		testClassMetric(metric);
	}



}
function testFileMetric(metric){

	println('Testing '+ metric.name + '\n');

	var totalTime = 0;	

	var results = [];
	
	for(var $file of Query.search("file")) {
		var timeBefore = performance.now();	
		var metricResult = metric.calculateForFile($file);
		var timeAfter = performance.now();
		//println($class);
		var timeExecution = (timeAfter - timeBefore);
		totalTime += timeExecution;
		println('	' + metric.sigla + ' for file '+ $file.path + ' = ' + metricResult);
		println('	Time: ' + timeExecution + ' ms.');

		//var workspacePath = WeaverOptions.getData().get("workspace").toString();
		//var relativePath = $file.path.slice(workspacePath.length + 1);

		var result = {"file":$file.path,"metric":metric.id,"result":metricResult,"time":timeExecution*1000};		
		results.push(result);
		
	}
	
	println('\n	Total Time: ' + totalTime + ' ms.');
	println();
	println();
	return results;

}


function testClassMetric(metric){

	println('Testing '+ metric.name + '\n');

	var totalTime = 0;	

	var results = [];
	
	for(var $class of Query.search("class")) {
		//println("		Class: " + $class.id);
		var timeBefore = performance.now();	
		var metricResult = metric.calculateForClass($class);
		var timeAfter = performance.now();
		//println($class);
		var timeExecution = (timeAfter - timeBefore);
		totalTime += timeExecution;
		println('	' + metric.sigla + ' for class '+ $class.id + ' = ' + metricResult);
		println('	Time: ' + timeExecution + ' ms.');

		var result = {"class":$class.id,"metric":metric.id,"result":metricResult,"time":timeExecution*1000};		
		results.push(result);
		
	}
	
	println('\n	Total Time: ' + totalTime + ' ms.');
	println();
	println();
	return results;

}

function testProjectMetric(metric){

	println('Testing '+ metric.name + '\n');
		
	var results = [];
	var timeBefore = performance.now();	
	var metricResults = metric.calculateForProject();
	var timeAfter = performance.now();
	var timeExecution = (timeAfter - timeBefore);

	metricResults.forEach(function(metricResult, classId) {
			println('	' + metric.sigla + ' for class '+ classId + ' = ' + metricResult);
			
			var result = {"class":classId,"metric":metric.id,"result":metricResult,"time":(timeExecution*1000/metricResults.size)};				
			results.push(result);
	});
	//println($class);

	println();
	println('	Total Time: ' + timeExecution + ' ms.');

	println();	

	return results;
}


function testFunctionMetrics(metrics){

	for(metric of metrics) {
		testFunctionMetric(metric);
	}



}

function testFunctionMetric(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $function of Query.search("function")) {
		var metricResult = metric.calculateForFunction($function);
		//println($class);
		println('	' + metric.sigla + ' for function '+ $function.signature + ' = ' + metricResult);
	}

	println();	

}

*/

/*
function testClassMetricsOld(metrics, language){

	for(metric of metrics) {
		if(language === "c++")
			 testClassMetricCpp(metric);

		if(language === "java")
			 testClassMetricJava(metric);	 

		if(language === "ind")
			 testClassMetricInd(metric);	 
		
	}
}




function testClassMetricCpp(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassCpp($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}

function testClassMetricJava(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassJava($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}

function testClassMetricInd(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassInd($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}
*/

  //////////////
 /// Prints ///
//////////////

function printNumberOfClasses(){

	// Get All Classes
	
	var $classes = Query.search('class').get();
	var numberOfClasses = $classes.length;

	println('The project has ' + numberOfClasses + ' classes');
	//println('The project has ' + Query.search('class').get().length + ' classes');
	println();
}

function printSuperClasses(){

	for(c of $classes){
		println('	'+c.name);
		println('		'+MetricQuery.getSuperClasses(c));
	}

}
function printAstFrom(node) {
	printAstAux(node, "");

}

function printAst() {
	var root = (new JoinPoints()).root();
	printAstAux(root, "");

}

function printAstAux(root, tab) {

	var children = (new JoinPoints())._all_children(root);
	//println(tab+root.astNode);
	println(tab+root.joinPointType);
	//println(tab+root.code);
	println(tab+root.astNode.getClass().getSimpleName());

	//Javascript
	//println(tab+root.astNode.get("type"));
	//println(tab+root.astNode.get("type") + "  " + root.astNode.get("loc"));

	if(root.instanceOf('expr')  ){
		//var astNode = root.astNode;
		//println(tab+"isfieldRef");
		//println(tab+root.code);
		//println(tab+Weaver.AST_METHODS.toJavaJoinPoint(root.astNode).code);
		//println(tab+root.getCode());
		//println(tab+astNode.getValue("memberDecl"));
		
	}

	if(root.instanceOf('binary')  ){
		println(tab+root.kind);
	}

	for (child of children)
		printAstAux(child,'	'+tab);

}

