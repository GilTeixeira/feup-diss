import lara.Io;

function testMetrics(metrics){

	var results = [];

	
	println("//////////////////////////////");
	println("/// Testing Project Metrics ////");
	println("//////////////////////////////");
	println();	

	for(metric of metrics) {
		if (typeof metric.calculateForProject == 'function')
    		results = results.concat(testProjectMetric(metric));
	}

	println("//////////////////////////////");
	println("/// Testing Class Metrics ////");
	println("//////////////////////////////");
	println();

	for(metric of metrics) {
		if (typeof metric.calculateForClass == 'function')
    		results = results.concat(testClassMetric(metric));
	}

	/*
	println("/////////////////////////////////");
	println("/// Testing Function Metrics ////");
	println("/////////////////////////////////");
	println();

	
	for(metric of metrics) {
		if (typeof metric.calculateForFunction == 'function')
    		testFunctionMetric(metric);
	}
	*/
	writeResultsToFile(results);

}

function writeResultsToFile(results){
	var file_path = "full_results.txt";
	var file = Io.writeFile(file_path,"class;metric;value;time\n");
	println("Results File Location: " + file.getAbsolutePath());
	
	for(result of results) {
		var classRes = result[0];
		var metricRes = result[1];
		var valueRes = result[2];
		var timeRes = result[3]*1000;
		var line = classRes+";"+metricRes+";"+valueRes+";"+timeRes+"\n";
		//print(line);
		
		Io.appendFile(file_path,line);
	
	}

}

function testClassMetrics(metrics){

	for(metric of metrics) {
		testClassMetric(metric);
	}



}

function testClassMetric(metric){

	println('Testing '+ metric.name + '\n');

	var totalTime = 0;	

	var results = [];
	
	for(var $class of Query.search("class")) {
		var timeBefore = performance.now();	
		var metricResult = metric.calculateForClass($class);
		var timeAfter = performance.now();
		//println($class);
		var timeExecution = (timeAfter - timeBefore);
		totalTime += timeExecution;
		println('	' + metric.sigla + ' for class '+ $class.id + ' = ' + metricResult);
		println('	Time: ' + timeExecution + ' ms.');

		
		results.push([$class.id,metric.sigla,metricResult,timeExecution]);
		
	}
	
	println('\n	Total Time: ' + totalTime + ' ms.');
	println();
	println();
	return results;

}

function testProjectMetric(metric){

	println('Testing '+ metric.name + '\n');
		
	var results = [];
	var timeBefore = performance.now();	
	var metricResults = metric.calculateForProject();
	var timeAfter = performance.now();
	var timeExecution = (timeAfter - timeBefore);

	metricResults.forEach(function(metricResult, classId) {
			println('	' + metric.sigla + ' for class '+ classId + ' = ' + metricResult);
			results.push([classId,metric.sigla,metricResult,(timeExecution/metricResults.size)]);
	});
	//println($class);

	println();
	println('	Total Time: ' + timeExecution + ' ms.');

	println();	

	return results;
}


function testFunctionMetrics(metrics){

	for(metric of metrics) {
		testFunctionMetric(metric);
	}



}

function testFunctionMetric(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $function of Query.search("function")) {
		var metricResult = metric.calculateForFunction($function);
		//println($class);
		println('	' + metric.sigla + ' for function '+ $function.signature + ' = ' + metricResult);
	}

	println();	

}

function testClassMetricsOld(metrics, language){

	for(metric of metrics) {
		if(language === "c++")
			 testClassMetricCpp(metric);

		if(language === "java")
			 testClassMetricJava(metric);	 

		if(language === "ind")
			 testClassMetricInd(metric);	 
		
	}
}




function testClassMetricCpp(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassCpp($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}

function testClassMetricJava(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassJava($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}

function testClassMetricInd(metric){

	println('Testing '+ metric.name + '\n');
		
	for(var $class of Query.search("class")) {
		var metricResult = metric.calculateForClassInd($class);
		println('	' + metric.sigla + ' for class '+ $class.name + ' = ' + metricResult);
	}

	println();	

}


  //////////////
 /// Prints ///
//////////////

function printNumberOfClasses(){

	// Get All Classes
	
	var $classes = Query.search('class').get();
	var numberOfClasses = $classes.length;

	println('The project has ' + numberOfClasses + ' classes');
	println();
}

function printSuperClasses(){

	for(c of $classes){
		println('	'+c.name);
		println('		'+MetricQuery.getSuperClasses(c));
	}

}
function printAstFrom(node) {
	printAstAux(node, "");

}

function printAst() {
	var root = (new JoinPoints()).root();
	printAstAux(root, "");

}

function printAstAux(root, tab) {

	var children = (new JoinPoints())._all_children(root);
	//println(tab+root.astNode);
	println(tab+root.joinPointType);
	//println(tab+root.code);
	println(tab+root.astNode.getClass().getSimpleName());

	//Javascript
	//println(tab+root.astNode.get("type"));

	if(root.instanceOf('expr')  ){
		//var astNode = root.astNode;
		//println(tab+"isfieldRef");
		//println(tab+root.code);
		//println(tab+Weaver.AST_METHODS.toJavaJoinPoint(root.astNode).code);
		//println(tab+root.getCode());
		//println(tab+astNode.getValue("memberDecl"));
		
	}

	if(root.instanceOf('binary')  ){
		println(tab+root.kind);
	}

	for (child of children)
		printAstAux(child,'	'+tab);

}

