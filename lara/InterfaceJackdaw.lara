import weaver.Query;
import weaver.jp.CommonJoinPoints;

import InterfaceUtils;
import Metrics.Metrics;


/**
 * Aspect used to test the metrics.
 */
aspectdef Interface
	printAst();
	printNumberOfClasses();

	var classMetrics = [
		//new NOC(), 
		//new DIT(), 
		//new RFC(),    // RFC ind different from Java because it does not count System, Math calls
		///new WMC(), 
		//new LCOM94(), 
		//new CBO()
		//new MPC(),
		//new DAC(),
		//new NOM(),
		//new SIZE1(),
		//new SIZE2(),

		new LOC()
	];
	var functionMetrics = [
		new CC()
	];

	testClassMetrics(classMetrics);
	testFunctionMetrics(functionMetrics);

	
	/*
	//Tests 
	// Test class.methods
	println("Test class.methods");
	var cl = Query.search("class", "Box").first();
	//var mets = cl.methods;
	println(cl.name);
	println(cl.methods);
	println(cl.methods[0].class.name == cl.name);
	println(cl.methods[0].signature);
	println(cl.methods[0].returnType.isClass);
	println();
	println(cl.methods[1].returnType.isClass);
	//
	// Test memberCall
	println("Test memberCall");
	var mc = Query.search("memberCall").first();	
	//println(CommonJoinPoints.toJoinPoint(mc.astNode.getExecutable().getDeclaringType()).joinPointType);
	//println("astnode: " + mc.astNode.getExecutable().getDeclaration());
	println(mc.method.name);
	println(mc.class.name);
	println(mc.function.name);
	// Test field
	var field = Query.search("field").first();
	println(field.name);
	println(field.class.name);
	// Test fieldRef
	var fieldRef = Query.search("fieldRef").first();
	println(fieldRef.field.name);
	println(fieldRef.class.name);
	

	
	//printObject(mc.astNode.getBase());
	//println(Weaver.AST_METHODS.toJavaJoinPoint(mc.astNode).decl);
	

	// test equals
	println("Test Equals");
	var field = Query.search("field").first();
	var field2 = Query.search("field").first();
	println(field === field2);
	println(field.joinPointType === field.joinPointType);
	println({} === {});

	// test allSuperClasses
	println(cl.name);
	println(cl.allSuperClasses.length);

	*/
	/*
	var fieldmyobject4 = Query.search("field", "myobject4").first();
	var fieldage = Query.search("field", "age").first();
	println(fieldmyobject4.name);
	println(fieldmyobject4.type.kind);
	println(fieldmyobject4.type.astNode.desugar().hasSugar());
	println(fieldmyobject4.type.astNode.desugarAll());
	var fieldmyobject4type = Weaver.AST_METHODS.toJavaJoinPoint(fieldmyobject4.astNode.type);
	println(fieldmyobject4type.templateArgsTypes);
	println();
	println(fieldmyobject4.type.usedClasses);
	println("usedTypes");
	println(fieldmyobject4.type.usedTypes);
	println(fieldmyobject4.type.usedTypes.filter(type=>type.isClass));
	println();
	//printObject(fieldmyobject4.type.astNode.getTypeDescendantsAndSelf()[0]);
	//println(fieldmyobject4.type.astNode.getDesugaredNodeFields[1].getCode());
	//MyPair2<AccessTestAux,int> myobject4;

	
	println();
	println(fieldage.name);
	println(fieldage.type.kind);
	println(fieldage.type.astNode.desugarAll().desugar().desugar());

	var cl = Query.search("class", "Animal").first();
	println(cl.name);
	println(cl.astNode.getType());
	
	*/
	/*
	println(Query.search("function").get().length);

	var dc = new FunctionJpx("");
	dc.test();
	*/
	/*
	var fieldmyobject4 = Query.search("field", "myobject4").first();
	var fieldage = Query.search("field", "atass").first();
	println(fieldmyobject4.type.astNode.getTypeDescendants()[0]);
	println();
	println(fieldage.type.astNode.getTypeDescendants()[0]);
	println(fieldage.type.astNode.getTypeDescendants()[1]);
	println(fieldage.type.astNode.getTypeDescendants()[2]);
	println();
	printObject(fieldage.type.usedTypes);
	println();
	println();
	println();
	printObject(fieldage.type.typeDescendantsAndSelf);
	println();
	println();
	println();
	printObject(fieldmyobject4.type.usedTypes);
	*/

	/*
	var cl = Query.search("class", "Tiger").first();
	printObject(cl.allSuperClasses);
	*/

	/*
	var cl = Query.search("class", "Foo3").first();
	//printObject(cl.allSuperClasses);

	var $fieldRefs = Query.searchFrom(cl).search("fieldRef").get();
	println($fieldRefs.length);
	printObject($fieldRefs);
	*/
	/*
	var cl = Query.search("class", "Dog").first();
	println((new CBO()).calculateForClass(cl));

	println(Query.searchFromInclusive(cl).search("field").get().length);
	*/
	//printObject(cl.allSuperClasses);

	//var cl = Query.search("class", "Box").first();
	//println(cl.astNode.getSuperclass().getTypeDeclaration());

	/*
	var a2 = Query.search("field","a2").first();
	var $fieldsTypes = a2.type.usedTypes;
	printObject($fieldsTypes);
	println();
	println();
	println($fieldsTypes[0].astNode.getClass().getSimpleName());
	println($fieldsTypes[0].astNode.isArray());
	println($fieldsTypes[1].astNode.getClass().getSimpleName());
	//$fieldsTypes = $fieldsTypes.filter($type => $type.isClass && $type.decl.id !== $class.id);
	//$fieldsTypes.forEach($type => classesCoupled.add($type.decl.id));
	*/
	/**/
	var a2 = Query.search("constructorCall").get()[1];
	//var $fieldsTypes = a2.type.usedTypes;
	//println(a2.type.isClass);
	//println(a2.astNode.getValue("constructorDecl"));
	//println(a2.astNode.line);
	printObject(a2.function);


	//printObject(cl.astNode.getConstructors()[0].getType());

	var a2 = Query.search("binary").get()[0];
	//var $fieldsTypes = a2.type.usedTypes;
	println(a2.astNode.getOp());
	println(a2.kind==="&&");

	var loop = Query.search("loop").get()[0];
	println(loop.hasCondition);
	//println(loop.condition.kind);

	var bar2 = Query.search("function","bar2").first();
	var bar2body = bar2.stmts;
	println(bar2body);

	var binary = Query.search("binary").get()[0];
	println(binary.kind === '&&');
	
	
end
/*
function DeclJpx(astNode) {
    // Parent constructor
    this.astNode=astNode;
    
}
DeclJpx.prototype.test = function(joinPointType) {
	throw this.constructor.name + '.test not implementedre'; 
}

function FunctionJpx(astNode) {
    // Parent constructor
    DeclJpx.call(this,astNode);
    
}
// Inheritance
FunctionJpx.prototype = Object.create(DeclJpx.prototype);

FunctionJpx.prototype.constructor = FunctionJpx;

*/

