import Metrics.Metric;
 
/**
 * Measures the Response For Class
 * @constructor
 */
function RFC() {
	var name = "Response For Class";
	var sigla = "RFC";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Response For Class (RFC) measures the set of methods that can potentially be executed in response to a message received by an object of that class.";

    // Parent constructor    
    Metric.call(this, name, sigla, author, year, description);
}

// Inheritance
RFC.prototype = Object.create(Metric.prototype);


RFC.prototype.calculateForClass = function($class) {

	// Given a class, its RFC is the addition of:
	// Method elements, including inherited
	// References to any Method

	var methodsSignatures = new Set();

	for (var $method of $class.allMethods){
		methodsSignatures.add($method.id);
		 //println($method.code);

		 if($method.instanceOf('constructor'))
		 	for(constructorCall of $method.superCalls)
		 		methodsSignatures.add(constructorCall.constructor.id);
	
		var $memberCalls = Query.searchFrom($method,"memberCall").get();
		for($memberCall of $memberCalls)
			if($memberCall.method.isCustom){
				methodsSignatures.add($memberCall.method.id);
				//println($memberCall.method.signature);
				//println($memberCall.code);
				//println($memberCall.parent.code);
				//println($memberCall.method.stmts);
				 //println($memberCall.astNode);
				//println();

			}

	}
	//Array.from(methodsSignatures).forEach(methodSignature => println(methodSignature));
	return methodsSignatures.size;
}
/*
// Override
RFC.prototype.calculateForClassCpp = function($class) {

	// Given a class, its RFC is the addition of:
	// Method elements
	// References to any Method

	var methodsSignatures = new Set();

	for (var $method of $class.methods)
		methodsSignatures.add($method.signature);

	// Methods called by the methods of $class
	var methodsCalled = Query.search("method", {"record": r => r.name === $class.name}).search("memberCall").get();

	methodsCalled.forEach(methodCalled => methodsSignatures.add(methodCalled.signature));
	
	var rfc = methodsSignatures.size;

	
	return methodsSignatures.size;
}


// Override
RFC.prototype.calculateForClassJava = function($class) {

	
	// Required
	// call.targetType.name : $class of call

	// Should main be considered a method???

	// Given a class, its RFC is the addition of:
	// Method elements
	// References to any Method (PrintStream::println is being considered )

	var methodsSignatures = new Set();	 

	for (var $method of Query.searchFromInclusive($class).search("method").get())
		methodsSignatures.add($class.name + '::' + $method.name); // TODO change to signature

	//methodsSignatures.add({'class': 'Puppy', 'method': 'main'});

	// Methods called by the methods of $class
	var $calls = Query.searchFromInclusive($class).search("method").search("call").get();

	$calls.forEach($call => methodsSignatures.add($call.targetType.name+ '::' + $call.name )); // TODO: does not handle method overload

	
	//println("Calls:");
	//$calls.forEach($call => {
//		println("attributes: " + $call.attributes);
		//println("qualifiedDecl: " + $call.arguments);
		//println("name: " + $call.name);
		//println("Class:  " + $call.targetType.name);
		//println();
		
	//});
	


	

	// Methods called by the methods of $class
	//var methodsCalled = Query.search("method", {"record": r => r.name === $class.name}).search("memberCall").get();

	//methodsCalled.forEach(methodCalled => methodsSignatures.add(methodCalled.signature));
	
	//var rfc = methodsSignatures.size;
	

	//println(Array.from(methodsSignatures));
	//methodsSignatures.forEach(methodSignature => println(methodSignature));
	//println(methodsSignatures.content);

	//println(Array.from(methodsSignatures));
	
	return methodsSignatures.size; 
}




RFC.prototype.calculateForClassInd = function($class) {

	// Given a class, its RFC is the addition of:
	// Method elements
	// References to any Method

	var methodsSignatures = new Set();	 

	for (var $method of Query.searchFromInclusive($class).search("method").get()){
		methodsSignatures.add(MetricQuery.getMethodSignature($method));

		var $methodsCalled = MetricQuery.getMethodsCalled($method);
		for (var $methodCalled of $methodsCalled)
			methodsSignatures.add(MetricQuery.getMethodSignature($methodCalled));	


	}

	//println(Array.from(methodsSignatures));
	return methodsSignatures.size;
}

*/

