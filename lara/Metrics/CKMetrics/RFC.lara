import Metrics.Metric;
 
/**
 * Measures the Response For Class
 * @constructor
 */
function RFC() {
	var name = "Response For Class";
	var sigla = "RFC";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Response For Class (RFC) measures the set of methods that can potentially be executed in response to a message received by an object of that class.";

    // Parent constructor    
    Metric.call(this, name, sigla, author, year, description);
}

// Inheritance
RFC.prototype = Object.create(Metric.prototype);


// Override
RFC.prototype.calculateForClass = function($class) {

	// Given a class, its RFC is the addition of:
	// Method elements
	// References to any Method

	var methodsSignatures = new Set();

	for (var $method of $class.methods)
		methodsSignatures.add($method.signature);

	// Methods called by the methods of $class
	var methodsCalled = Query.search("method", {"record": r => r.name === $class.name}).search("memberCall").get();

	methodsCalled.forEach(methodCalled => methodsSignatures.add(methodCalled.signature));
	
	var rfc = methodsSignatures.size;

	return methodsSignatures.size;
}


// Override
RFC.prototype.calculateForClassJava = function($class) {

	// Should main be considered a method???

	// Given a class, its RFC is the addition of:
	// Method elements
	// References to any Method

	var methodsSignatures = new Set();	 

	//for (var $method of Query.search("class", $class.name).search("method").get())
		//methodsSignatures.add($class.name, 'method': $method.name});

	methodsSignatures.add({'class': 'Puppy', 'method': 'main'});
/*
	// Methods called by the methods of $class
	var methodsCalled = Query.search("method", {"record": r => r.name === $class.name}).search("memberCall").get();

	methodsCalled.forEach(methodCalled => methodsSignatures.add(methodCalled.signature));
	
	var rfc = methodsSignatures.size;
	*/

	println(Array.from(methodsSignatures));
	methodsSignatures.forEach(methodSignature => println("CLASS: " + methodSignature.class + " Method: " + methodSignature.method));
	//println(methodsSignatures.content);
	
	return methodsSignatures.size; 
}