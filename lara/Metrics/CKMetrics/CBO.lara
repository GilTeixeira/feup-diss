import Metrics.Metric;

/**
 * Measures the Coupling between Object Classes
 * @constructor
 */
function CBO() {
	var name = "Coupling between Object Classes";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Coupling between Object Classes (CBO) measures the number of classes to which a class is coupled.";

    // Parent constructor    
    Metric.call(this, name, author, year, description);
}

// Inheritance
CBO.prototype = Object.create(Metric.prototype);


// Override
CBO.prototype.calculateForClass = function($class) {

	var classesCoupled = new Set();

	// Functions called by the methods of $class
	var methodsCalled = Query.search("method", {"record": r => r.name === $class.name}).search("memberCall").get();

	//println("\nFunctions Called");
	//functionsCalled.forEach(functionCalled => println(functionCalled.name));

	// Filter functions and operator<< (cout), only methods required
	// var methodsCalled = functionsCalled.filter(func => func.definition && func.definition.record);

	//println("\n Methods Called");
	//methodsCalled.forEach(methodCalled => println(methodCalled.name));

	// do not include self class
	methodsCalled.forEach(methodCalled=>{
		var classNameOfMethod = methodCalled.definition.record.name;
		if(methodCalled.definition.record.name !== $class.name)
			classesCoupled.add(classNameOfMethod); 
  		
	});

	//print(classesCoupled.values()+ "\n");

	// Methods that call the methods of $class
	var methodsThatCall = Query.search("method").search("memberCall", 
		{"definition": d => d.record.name === $class.name}).chain();

	//println("\Methods that call method of class:");
	for(var query of methodsThatCall) {
		if(query["method"].record.name !== $class.name)
			classesCoupled.add(query["method"].record.name);

		//println(query["method"].record.name);
		//println();
	}

	// TODO: fields accesses

	return classesCoupled.values().length;
}
