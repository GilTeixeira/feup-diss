import Metrics.Metric;


/**
 * Measures the Number of Children
 * @constructor
 */
function NOC() {
	var name = "Number of Children";
	var sigla = "NOC";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Number of Children (NOC) measures  number of immediate sub-classes of a class.";

    // Parent constructor    
    Metric.call(this, name, sigla, author, year, description);
}

// Inheritance
NOC.prototype = Object.create(Metric.prototype);


// Override
NOC.prototype.calculateForClass = function($class) {
	// Required
	// class.bases : Array of classes
	

	return Query.search("class", 
		{"bases": bases => bases.map(base => base.name).includes($class.name)})
		.get().length;

			
}

NOC.prototype.calculateForClassJava = function($class) {

	// Required
	// class.superClass : Name of superClass

	return Query.search("class",{'superClass':$class.name}).get().length;
			
}

NOC.prototype.calculateForClassInd = function($class) {

	var noc = 0;

	var $classes = Query.search('class').get();
	for(subclass of $classes){
		var superClasses = MetricQuery.getSuperClasses(subclass);

		if(superClasses.some(superClass => superClass.name === $class.name))
			noc++;
	}

	return noc;

}

