import Metrics.Metric;


/**
 * Measures the Number of Children
 * @constructor
 */
function NOC() {
	var id = "CK-NOC";
	var name = "Number of Children";
	var sigla = "NOC";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Number of Children (NOC) measures  number of immediate sub-classes of a class.";

    // Parent constructor    
    Metric.call(this, id, name, sigla, author, year, description);
}

// Inheritance
NOC.prototype = Object.create(Metric.prototype);

NOC.prototype.calculateForProjectPerClass = function() {

	var superClassesMap =  new Map();
	var classes = Query.search('class').get();	

	for($classSuper of classes){
		superClassesMap.set($classSuper.id,0);
		for($classSub of classes)
			if($classSub.superClasses.some($superClass => $superClass.id === $classSuper.id))
				superClassesMap.set($classSuper.id,superClassesMap.get($classSuper.id)+1);

	}
	
		
	//println($classSub.astNode);

	//superClassesMap.forEach(function(value, key) {
  	//	console.log(key + ' = ' + value + '\n');
	//});

	//for (var [key, value] of superClassesMap)
  		//println(key + ' = ' + value);

	//return Query.search("class",{'superClass':$class.name}).get().length;
	return superClassesMap;	
}



// Override

/*
NOC.prototype.calculateForClass = function($class) {	
	var noc = 0;
	var $classes = Query.search('class').get();

	for($classSub of $classes){
		//println("Class:");
		//println($classSub.astNode);
		//println("SuperClass:");
		//println($classSub.astNode.getSuperclass());
		//println($classSub.astNode.getSuperclass().getTypeDeclaration());
		//println($classSub.astNode.getSuperclass()===null);
		//println($classSub.astNode.getSuperclass().getClass());
		//println($classSub.superClasses);
		if($classSub.superClasses.some($classSuper => $classSuper.id === $class.id))
			noc++;
	}
	return noc;
}





//==============================================//
NOC.prototype.calculateForClassCpp = function($class) {
	// Required
	// class.bases : Array of classes
	

	return Query.search("class", 
		{"bases": bases => bases.map(base => base.name).includes($class.name)})
		.get().length;

			
}

NOC.prototype.calculateForClassJava = function($class) {

	// Required
	// class.superClass : Name of superClass

	return Query.search("class",{'superClass':$class.name}).get().length;
			
}

NOC.prototype.calculateForClassInd = function($class) {

	var noc = 0;

	var $classes = Query.search('class').get();
	for(subclass of $classes){
		var superClasses = MetricQuery.getSuperClasses(subclass);

		if(superClasses.some(superClass => superClass.name === $class.name))
			noc++;
	}

	return noc;

}
*/
