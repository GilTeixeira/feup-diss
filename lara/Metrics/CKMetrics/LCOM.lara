import Metrics.Metric;
import weaver.Selector;

/**
 * Measures the Lack of Cohesion of Methods
 * @constructor
 */
function LCOM94() {
	var name = "Lack of Cohesion of Methods";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Lack of Cohesion of Methods (LCOM) describes the lack of cohesion among the methods of a class.";

    // Parent constructor    
    Metric.call(this, name, author, year, description);
}
	
// Inheritance
LCOM94.prototype = Object.create(Metric.prototype);


// Override
LCOM94.prototype.calculateForClass = function($class) {
	// print("	Class: " + $class.name+"\n");

	// Calculate Field Access by Method
	// TODO : Right now it also includes access to fields of other classes with the same name
	var methodFieldsMap = new Map();
	for($method of $class.methods){
		var fieldsAccessedArr = [];
		var fieldsAccessesByMethod = Query.searchFrom($method.definitionJp,"memberAccess").get(); // TODO; memberAccess must belong to class
		fieldsAccessesByMethod = fieldsAccessesByMethod.map(jp => jp.name);
		
		for($field of $class.fields)
			if(fieldsAccessesByMethod.includes($field.name))
				fieldsAccessedArr.push($field.name);

		methodFieldsMap.set($method.name, fieldsAccessedArr);
			
	}
	
	/*
	methodFieldsMap.forEach((value, key)=>{
		print("	Method: " + key + "\n");
		print("	Fields: " + value + "\n\n");
	});
	*/


	// TODO : Consider Methods that access other methods
	var numPairMethodCommomFieldAccess = 0; // Q
	var numPairMethodNoCommomFieldAccess = 0; // P
	
	for (i = 0; i < $class.methods.length; i++)
		for (j = i + 1; j < $class.methods.length; j++){
			var $method1 = $class.methods[i].name;
			var $method2 = $class.methods[j].name;
	
			// Check if methods access the same field
			var commonFields = methodFieldsMap.get($method1).filter(function(value) { 
				return methodFieldsMap.get($method2).indexOf(value) > -1;
	      	});

	      	if(commonFields.length === 0)
	      		numPairMethodNoCommomFieldAccess++;
	      	else numPairMethodCommomFieldAccess++;
			

		}

	// LCOM = |P| - |Q|, if |P| > |Q|
	// LCOM = 0, if |P| <= |Q|
	
	var cbo = Math.max((numPairMethodNoCommomFieldAccess - 
			numPairMethodCommomFieldAccess), 0);
	
	return cbo; 


}
