import Metrics.Metric;


/**
 * Measures the Depth of Inheritance Tree
 * @constructor
 */
function DIT() {
	var name = "Depth of Inheritance Tree";
	var sigla = "DIT";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Depth of Inheritance Tree (DIT) measures the maximum inheritance path from the class to the root class.";

    // Parent constructor    
    Metric.call(this, name, sigla, author, year, description);
}

// Inheritance
DIT.prototype = Object.create(Metric.prototype);


// Override
DIT.prototype.calculateForClass = function($class) {
	if($class === null)
		return 0;

	var depth = 0;
	for($base of $class.bases)
		if(this.calculateForClass($base) + 1 > depth)
			depth = this.calculateForClass($base) + 1;

	return depth;
			
}

DIT.prototype.calculateForClassJava = function($class) {

	var dit = 0;
	var currClass = $class;

	while(Query.search("class",currClass.superClass).get().length){
	//while(currClass.superClass !== 'java.lang.Object'){
		currClass = Query.search("class",$class.superClass).first();
		dit++;
	}

	return dit;

}

