import Metrics.Metric;


/**
 * Measures the Depth of Inheritance Tree
 * @constructor
 */
function DIT() {
	var id = "CK-DIT";
	var name = "Depth of Inheritance Tree";
	var sigla = "DIT";
	var author = "Chidamber and Kemerer";
	var year = 1994;
	var description = "Depth of Inheritance Tree (DIT) measures the maximum inheritance path from the class to the root class.";

    // Parent constructor    
    Metric.call(this, id, name, sigla, author, year, description);
}

// Inheritance
DIT.prototype = Object.create(Metric.prototype);

// Override
DIT.prototype.calculateForClass = function($class) {

	var depth = 0;

	//println("astNode: " + $class.astNode);
	//println("super: " + $class.superClasses);
	//println("bases: " + $class.astNode.getBases());
	//println("parse: " + Weaver.toJs($class.astNode.getBases()));
	//println("common: " + CommonJoinPoints.toJoinPoints(Weaver.toJs($class.astNode.getBases())));
	for($classSuper of $class.superClasses){
		//println("Super: " + $classSuper);
		depthSuperClass = this.calculateForClass($classSuper) + 1;
		depth =  Math.max(depthSuperClass,depth);
	}
	return depth;
}

/*









//==============================================//
// Override
DIT.prototype.calculateForClassCpp = function($class) {
	if($class === null)
		return 0;

	var depth = 0;
	for($base of $class.bases)
		if(this.calculateForClass($base) + 1 > depth)
			depth = this.calculateForClass($base) + 1;

	return depth;
			
}

DIT.prototype.calculateForClassJava = function($class) {

	// Required
	// class.superClass : Name of superClass

	var dit = 0;
	var currClass = $class;

	while(Query.search("class",currClass.superClass).get().length){
	//while(currClass.superClass !== 'java.lang.Object'){
		currClass = Query.search("class",$class.superClass).first();
		dit++;
	}

	return dit;

}

DIT.prototype.calculateForClassInd = function($class) {
	if($class === null)
		return 0;

	
	var depth = 0;
	var superClasses = MetricQuery.getSuperClasses($class);
	
	for(superClass of superClasses)
		if(this.calculateForClassInd(superClass) + 1 > depth)
			depth = this.calculateForClassInd(superClass) + 1;

	return depth;
			
}

*/