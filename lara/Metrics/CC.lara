import Metrics.Metric;

/**
 * Measures the Cyclomatic complexity
 * @constructor
 */
function CC() {
	var name = "Cyclomatic complexity";
	var author = "Thomas J. McCabe";
	var year = 1976;
	var description = "Cyclomatic complexity (CC) measures the number of linearly independent paths through a program's source code.";

    // Parent constructor    
    Metric.call(this, name, author, year, description);
}

// Inheritance
CC.prototype = Object.create(Metric.prototype);



CC.prototype.calculateForFunction = function($function) {
	var complexityCounter = 0;

	complexityCounter += Query.searchFrom($function, 'if').get().length;
	complexityCounter += Query.searchFrom($function, 'loop').get().length;
	var binaryLogicOps = ["l_and", "l_or"];
	complexityCounter += Query.searchFrom($function, 'binaryOp', {"kind": $kind => binaryLogicOps.includes($kind)}).get().length;
	
	// The complexity gets incremented by one for: 
	//x// function definitions, 
	//x// while, do while, for, 
	//throw statements, switch, case, default, 
	//x// && operator, || operator, 
	// ? ternary operator, 
	//catch, break, continue, goto.



	return complexityCounter;
}
