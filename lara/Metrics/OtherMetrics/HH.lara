import Metrics.Metric;

/**
 * Measures the Lines of Code
 * @constructor
 */
function HH() {
	var name = "Halstead";
	var sigla = "HH";
	var author = "Halstead";
	var year = 1960;
	var description = "HH";
	
    // Parent constructor    
    Metric.call(this, id, name, sigla, author, year, description);
}

// Inheritance
HH.prototype = Object.create(Metric.prototype);


/*
HH.prototype.calculateForClass = function($class) {
	return $class.endLine-$class.line+1;

}
*/

HH.prototype.calculateForFunction = function($function) {
	var complexityCounter = 0;

	var nodeLeafs = [];
	var nodeStack = [$function];

    while (nodeStack.length !== 0) 
    { 
    	var nodeTop =  nodeStack.shift();

		if(nodeTop.children.length===0)
			nodeLeafs.push(nodeTop);


	// depth first search
    	nodeTop.children.slice().reverse().forEach(nodeChild => nodeStack.unshift(nodeChild));

    }

     for(node of nodeLeafs){
     	//println("node:");
     	//println(node);
     	//println("code: ");
     	try{
     	//println(node.astNode.getCode());
     	//println(node.code);
     	}
     	catch(error){}
     	
     	
     }

	return complexityCounter;

}