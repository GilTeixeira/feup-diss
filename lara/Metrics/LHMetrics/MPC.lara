import Metrics.Metric;


/**
 * Measures the Message Passing Coupling
 * @constructor
 */
function MPC() {
	var name = "Message Passing Coupling";
	var sigla = "MPC";
	var author = "Li and Henry";
	var year = 1993;
	var description = "Message Passing Coupling (MPC) ounts the number of send statements defined in a class.";

    // Parent constructor    
    Metric.call(this, name, sigla, author, year, description);
}

// Inheritance
MPC.prototype = Object.create(Metric.prototype);

// Override
MPC.prototype.calculateForClass = function($class) {

	var classesCoupled = new Set();

	var $memberCalls = Query.searchFrom($class, "memberCall").get();
	$memberCalls = $memberCalls.filter($memberCall=> $memberCall.class.id !== $class.id);
	$memberCalls.forEach($memberCall => classesCoupled.add($memberCall.class.id));
	
	return classesCoupled.size;
}

