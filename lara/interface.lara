import weaver.Query;

aspectdef Metrics

	var classes = Query.search("class");
	var numberOfClasses = Array.from(classes).length;


	var numberOfMethods = 0;
	var numberOfAttributes = 0;	
		
	for( var $class of Query.search("class")) {
		numberOfMethods += $class.methods.length;
		numberOfAttributes += $class.fields.length;

		//for( var field of $class.fields) {
		//	println(field.name);
		//
		//}
	}



	var linesOfCode = 0;
	for( var file of Query.search("file")) {
		var lines = file.code.split(/\n/);
		linesOfCode += lines.length;
		println(file.endLine); // correto
		//println("------------");
		//for( var line of lines) {
		//	println(line);
		//}
		//print("------------");

	}

	///Set de chamada or map 
	// http://www.tusharma.in/technical/revisiting-lcom/
	// incomplete
	var lcom96b = {};
	for( var $class of Query.search("class")) {
		
		var numMethods = $class.methods.length;
		var numAttributes = $class.fields.length;
		var lcomClass = 0;

		for( var field of $class.fields) {
			var numMethodsUsingField = 0;
			for( var method of $class.methods) {

				//if(method.uses(field))
					//numMethodsUsingField++;
				if(method.body){
					println(method.name);
					println(method.body.code);

					}
					

			}
			lcomClass += (numMethods - numMethodsUsingField)/numMethods;
		
		}

		lcomClass /= numAttributes;
		lcom96b[$class.name]=lcomClass;
	}

 	
	

	println('\nMetrics: ');
	print('Number of classes: ');
	println(numberOfClasses);

	print('Number of methods: ');
	println(numberOfMethods);

	print('Methods per Class: ');
	println(numberOfMethods/numberOfClasses);

	print('Number Of Attributes: ');
	println(numberOfAttributes);

	print('Attributes per Class: ');
	println(numberOfAttributes/numberOfClasses);

	// not correct
	print('Lines of Code: ');
	println(linesOfCode);

	println('LCOM96b: ');	
	for (c in lcom96b) {
		print('\t');
		print(c);
		print(' : ');
		println(lcom96b[c]);		
	
	}


	var materials = [
  'Hydrogen',
  'Helium',
  'Lithium',
  'Beryllium'
];

println(materials.map(material => material));

var array12 = [1, 2, 3, 4];
var reducer = (accumulator, currentValue) => accumulator + currentValue;

// 1 + 2 + 3 + 4
println(array12.reduce(reducer));
// expected output: 10

println(array12.reduce(reducer, 5));


var array1 = ['a', 'b', 'c'];

array1.forEach(element => println(element));



	

end
// Questions

/*
	 // Why cant i do this?

	var classes = Query.search("class");
	var numberOfClasses1 = 0;
	var numberOfClasses2 = 0;	
	
	for(var a of classes) {
		numberOfClasses1 += 1;
	}
	
	for(var a of classes) {
		numberOfClasses2 += 1;
	}

	print('Number of classes1: ');
	println(numberOfClasses1);

	print('Number of classes2: ');
	println(numberOfClasses2);
	*/

	/*

	// Javascript version?
	// arrow function (=>), const, let
	
	var array1 = [1, 4, 9, 16];

	var map1 = array1.map(x => x * 2);

	*/


	// How to select the entire program
	// To calculate number of lines of code


	// methods defined outside the class do not belong to class code?
	// definitionJp 
	// declatitonJp

	// code from file different from $file.code

	// varrefs da function
	// varref declarations

	// query doc = weaverJps

	// interface metric
	// for each metric apply
	// get setters. 

	
	// Comecar  a tese.
	// Preparar a estrutura.

	// get iterator

